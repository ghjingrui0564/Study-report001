#include<glad/glad.h>
#include<GLFW/glfw3.h>

#include<iostream>

void framebuffer_size_callback(GLFWwindow* window,int width,int height);
void processInput(GLFWwindow *window);

//settings
const unsigned int SCR_WIDTH=800;
const unsigned int SCR_HEIGHT=600;

int main()
{
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,3);
	glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);
#ifdef__APPLE__
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT,GL_TRUE);//在MAC OS系统中起作用
#endif

//window creation
GLFWwindow* window=glfwCreateWindow(800,600,"learnOpenGL",NULL,NULL);
if(window==NULL)
{
	std::cout<<"failed to create GLFW window"<<std::endl;
	glfwTerminate();
	return -1;
}
glfwMakeContextCurrent(window);

//注册这个函数，告诉GLFW在窗口调整大小时调用这个函数
glfwSetFramebufferSizeCallback(window,framebuffer_size_callback);

//GLAD是用来管理OpenGL的函数指针的，所以在调用任何OpenGL的函数之前需要初始化GLAD
if(!gladLoadGLLoader((GLADloadproc)glfwGetprocAddress))
{
	std::cout<<"failed to initialize GLAD"<<std::endl;
	return -1;
}

//在渲染循环的每一次迭代中调用processInput
while(!glfwWindowShouldClose(window))
{	
	processInput(window);

	//清空屏幕颜色缓冲
	glClearColor(0.2f,0.3f,0.3f,1.0f)//设置清空屏幕所用颜色
	glClear(GL_COLOR_BUFFER_BIT);

	glfwSwapBuffer(window);
	glfwPollEvents();
}
	//释放资源
	glfwTerminate();
	return 0;
}
//输入
void pricessInput(GLFWwindow *window)
{
	if(glfwGetKey(window,GLFW_KEY_ESCAPE)==GLFW_PRESS)
		glfwSetWindowShouldClose(window,true);
}
//回调函数，在每次窗口大小被调整的时候被调用
void framebuffer_size_callback(GLFWwindow* window,int width,int height)
{
	glViewport(0,0,width,height);
}
