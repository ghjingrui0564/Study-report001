#include<glad/glad.h>
#include<GLFW/glfw3.h>

#include<iostream>

void framebuffer_size_callback(GLFWwindow* window,int width,int height);
void processInput(GLFWwindow *window);

//settings
const unsigned int SCR_WIDTH=800;
const unsigned int SCR_HEIGHT=600;

const char *vertexShaderSource="#version 330 core\n"
	"layout (location=0) in vex aPos;\n"
	"void main()\n"
	"{\n"
		"gl_Position=vec(aPos.x,aPos.y,aPos.z,1.0);\n"
	"}\n\0";
const char *fragmentShaderSource="#version 330 core\n"
	"out vec4 FragColor;\n"
	"void main()\n"
	"{\n"
		FragColor=vec(1.0f,0.5f,0.2f,1.0f);\n"
	"}\n\0";

int main()
{
	//glfw:initialize and configure
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,3);
	glfwWindowHint(GLFW)CONTEXT_VERSION_MINOR,3);
	glfwWindowHint(GLFW_OPENGL_PROFILE,GLFW_OPENGL_CORE_PROFILE);
	
#ifdef __APPLE__
	glfwWindowHit(GLFW_OPENGL_FORWARD_COMPAT,GL_TRUE);//uncomment this statement to fix on OS X
#endif
	
	//window creation
	GLFWwindow* window=glfwCreateWindow(SCR_WIDTH,SCR_HEIGHT,"MyTriangle",NULL.NULL);
	if(window==NULL)
	{
		std::cout<<"Failed to create GLFW window"<<std::endl;
		glfwTerminate();//release all resources
		return -1;
	}
	glfwMakeContextCurrent(window);
	glfwSetFramebufferSizeCallback(window,framebuffer_size_callback);

	//initialize glad:load all opengl function pointers
	if(!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
	{
		std::cout<<"Failed to initialize GLAD"<<std::endl;
		return -1;
	}

	//vertex shader
	int vertexShader=glCreateShader(GL_VERTEX_SHADER);
	//shader source code is attached to the shader object and compiled
	glShaderSource(vertexShader,1,&vertexShaderSource,NULL);
	glCompileShader(vertexShader);

	//check
	int success;
	char infoLog[512];
	glGetShaderiv(vertexShader,GL_COMPILE_STATUS,&success);
	if(!success)
	{
		glGetShaderInfoLog(vertexShader,512,NULL,infoLog);
		std::cout<<"error::shader::vertex::compilation\n"<<infoLog<<std::endl;
	}
	
	//fragment shader
	int fragmentShader=glCreateShader(GL_FRAGMENT_SHADER);
	glshaderSource(fragmentShader,1,&fragmentShaderSource,NULL);
	glCompileShader(fragmentShader);
	//check
	glGetShaderiv(fragmentShader,GL_COMPILE_STATUS,&success);
	if(!success)
	{
		glGetShaderInfoLog(fragmentShader,512,NULL,infoLog);
		std::cout<<"error::shader::fragment::compilation\n"<<infoLog<<std::endl;
    }
	
	//linck shaders
	int shaderProgram=glCreateProgram();
	glAttachShader(shaderProgram,vertexShader);
	glAttachShader(shaderProgram,fragmentShader);
	glLinkProgram(shaderProgram);
	//check for linking errors
	glGetProgramiv(shaderProgram,GL_LINK_STATUS,&success);
	if(!success){
		glGetProgramInfoLog(shaderProgram,512,NULL,infolog);
		std::cout<<"error::shader::program::linking_failed\n"<<infoLog<<std::endl;
	}
	glDeleteShader(vertexShader);
	glDeleteShader(fragmentShader);
	
	//set up vertex data and buffers and configure vertex attributes
	float vertices[]={
		-0.5f,-0.5f,0.0f,
		 0.5f,-0.5f,0.0f,
		 0.0f,0.5f,0.0f
	};

	unsigned int VBO,VAO;
	glGenVertexArrays(1,&VAO);
	glGenBuffers(1,&VBO);
	//bind VAO-->bind and set vertex buffers--> configure vertex attributes
	glBindVertexArray(VAO);

	glBindBuffer(GL_ARRAY_BUFFER,VBO);
	glBufferData(GL_ARRAY_BUFFER,sizeof(vertices),vertices,GL_STATIC_DRAW);
	glEnableVertexAttribArray(0);

	glBindBuffer(GL_ARRAY_BUFFER,0);
									//difficulty
	glBindVertexArray(0);
	
	//render loop
	while(!glfwWindowShouldClose(window))
	{
		processInput(window);//keep clean
		//render
		glClearColor(0.2f,0.3f,0.3f,1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		glUseProgram(shaderProgram);
		glBindVertexArray(VAO);
		glDrawArrays(GL_TRIANGLE,0,3);
		
		glfwSwapBuffers(window);
		//poll IO events (keys pressed/released mouse moved)
		glfwPollEvents();
	}

	gkDeleteVertexArrays(1,&VAO);
	glDeleteBuffers(1,&VAO);

	glfwTerminate();
	return 0;
}

//
void processInput(GLFWwindow *window)
{
	if(glfwGetKey(window,GLFW_KEY_ESCAPE)==GLFW_PRESS)
		glfwSetWindowShouldClose(window,true);
}

void framebuffer_size_callback(GLFWwindow* window,int width,int height)
{
	glViewport(0,0,width,height);
}
